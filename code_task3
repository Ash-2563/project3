code

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Load the dataset
df = pd.read_csv(r"C:\Users\hp\Downloads\customer_data.csv")

# Drop CustomerID as it's not needed for clustering
df.drop(columns=['CustomerID'], inplace=True)

# Standardizing the features for better clustering performance
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df)

# Finding the optimal number of clusters using the Elbow Method
wcss = []  # Within-Cluster Sum of Squares
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(scaled_data)
    wcss.append(kmeans.inertia_)

# Plot the Elbow Method graph
plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--', color='b')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS (Within-Cluster Sum of Squares)')
plt.title('Elbow Method for Optimal K')
plt.show()

# Applying K-Means clustering with optimal clusters (K=5)
kmeans = KMeans(n_clusters=5, init='k-means++', random_state=42)
clusters = kmeans.fit_predict(scaled_data)

# Add cluster labels to the dataset
df['Cluster'] = clusters

# Visualizing the Clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(x=df['Annual Income (k$)'], y=df['Spending Score (1-100)'], hue=df['Cluster'], palette='viridis', s=100, alpha=0.8)
plt.scatter(kmeans.cluster_centers_[:, 1] * scaler.scale_[1] + scaler.mean_[1], 
            kmeans.cluster_centers_[:, 2] * scaler.scale_[2] + scaler.mean_[2], 
            s=300, c='red', marker='X', label='Centroids')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Customer Segmentation using K-Means Clustering')
plt.legend()
plt.show()
